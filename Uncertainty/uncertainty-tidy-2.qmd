---
title: "Uncertainty - Tidyverse lecture 2"
subtitle: For loop and functionals
author: "Introduction to Quantitative Social Science"
institute: 
  - "Xiaolong Yang"
  - "University of Tokyo"
date: "July 5, 2022"
navigation: frame
format: 
  beamer: 
    navigation: horizontal
    theme: "Madrid"
    colortheme: "beaver"
    incremental: false
    default-image-extension: tex
    slide-level: 2
---

```{r include = FALSE}
library(tidyverse)
data(FLVoters, package = "qss")
```

## Today's Game Plan


1. reducing duplication: **iteration**
  - writing a for loop
  - for loop v.s. functionals
  
:::{.callout-note appearance="simple"}
Today's in-class assignment: `file-drawer`
::: 

# Iteration: for loop

## Recap: why to avoid copy-paste?

**Motivations?**


```{r}
#| eval: false
#| echo: true 

mean(FLVoters$county)
mean(FLVoters$age)
mean(FLVoters$VTD)
median(FLVoters$county)
median(FLVoters$age)
median(FLVoters$VTD)
sd(FLVoters$county)
sd(FLVoters$age)
sd(FLVoters$VTD)
```

---

1. eyes on **difference** not similarity

---

1. eyes on **difference** not similarity
2. easier to **respond to changes** in requirements

---

1. eyes on **difference** not similarity
2. easier to **respond to changes** in requirements
3. **fewer bugs**

## Landscape of Duplication Reduction in R

![`Duplication reduction in R`](~/Desktop/iteration.png){width=60%}

## For loops: a motivating example

**Compute the mean of each numeric variable in `FLVoters`**

```{r}
#| eval: true
#| echo: false 

FLVoters <- na.omit(FLVoters)
```

```{r}
#| eval: true
#| echo: true 

mean(FLVoters$VTD)
mean(FLVoters$age)
mean(FLVoters$county)
```

---


**Compute the mean of each numeric variable in `FLVoters`**

```{r}
#| eval: true
#| echo: true 
FLVoters  <- FLVoters %>% 
  select(where(is.numeric)) # keep numeric

output <- rep(NA, length(FLVoters))          # 1. output
for (i in seq_along(FLVoters)) {             # 2. sequence
  output[[i]] <- mean(FLVoters[[i]])         # 3. body
}
output
```

## 3 components for every for loop: 1

1. The **output**: create a empty vector as container beforehand 
  - `rep(NA, length)`
  - `vector(type, length)`
  
```{r}
#| eval: false
#| echo: true 

output <- rep(NA, length(FLVoters)) # 1. output
```

```{r}
#| eval: false
#| echo: true 

# alternatively
output <- vector("double", length(FLVoters))
```


## 3 components for every for loop: 2

2. The **sequence**: what to loop over 
  - each run `i` is assigned a different value from `seq_along(df)`
  - `i` as **it**

```{r}
#| eval: true
#| echo: true 
seq_along(FLVoters)
```

```{r}
#| eval: false
#| echo: true 

for (i in seq_along(FLVoters)) {}       # 2. sequence
```

## 3 components for every for loop: 3

3. The **body**: code that run repeatedly, each time with a different `i`

```{r}
#| eval: false
#| echo: true 


for (i in seq_along(FLVoters)) {        
  output[[i]] <- mean(FLVoters[[i]])         # 3. body
}
```

  - `output[[1]] <- mean(FLVoters[[1]])`
  - `output[[2]] <- mean(FLVoters[[2]])` 
  - ...
  
:::{.callout-tip appearance="simple"}
Subsetting R objects: `[]`, `[[]]`, `$` ([**link**](https://bookdown.org/rdpeng/rprogdatascience/subsetting-r-objects.html))
::: 

---

![`Monster for loop`](~/Desktop/monster_for_loop.png){width=90%}


## For loops v.s. functionals

- R as functional programming language: one can **wrap for loops in a function**, and call that function instead 


:::: {.columns}

::: {.column width="50%"}
![`For loops in R`](~/Desktop/forloops.png){width=100%}
:::

::: {.column width="50%"}
![`Functionals in R`](~/Desktop/map_frosting.png){width=90%}
:::

::::

## For loops v.s. functionals

Consider a simple motivating example 

  - **compute the mean of every numeric variable (every column)**

```{r}
#| eval: false
#| echo: true 

output <- rep(NA, length(FLVoters))          # 1. output
for (i in seq_along(FLVoters)) {             # 2. sequence
  output[[i]] <- mean(FLVoters[[i]])         # 3. body
}
output
```

## For loops v.s. functionals

Since we do this so frequently, how about **extracting it into a function**?

```{r}
#| eval: true
#| echo: true 

col_mean <- function(df) {
  output <- rep(NA, length(df)) 
  for (i in seq_along(df)) {
    output[[i]] <- mean(df[[i]])
  }
  output
}

col_mean(FLVoters)
```

## For loops v.s. functionals

But wait, surely **median**, **standard deviation** matter too!

## For loops v.s. functionals

```{r}
#| eval: true
#| echo: true 

col_median <- function(df) {
  output <- rep(NA, length(df)) 
  for (i in seq_along(df)) {
    output[[i]] <- median(df[[i]])
  }
  output
}

```


```{r}
#| eval: true
#| echo: true 

col_sd <- function(df) {
  output <- rep(NA, length(df)) 
  for (i in seq_along(df)) {
    output[[i]] <- sd(df[[i]])
  }
  output
}

```

Side effects: hard to see the difference; bug $\rightarrow$ **generalize**


## Generalizing for loops by writing functions

Add an argument to supply different functions to each column

  - create a `col_summary()` with `df` and `fn` arguments

```{r}
#| eval: true
#| echo: true 

col_summary <- function(df, fn) {
  out <- rep(NA, length(df)) 
  for (i in seq_along(df)) {
    out[[i]] <- fn(df[[i]])
  }
  out
}

col_summary(FLVoters, median)
col_summary(FLVoters, sd)
col_summary(FLVoters, mean)
```


## Summary

**What we learnt**

- iteration 
  - for loop
  - generalize for loop with functionals (`purrr`)

![](~/Desktop/purrr_cat.png){width=20%}

## Final Game Plan

- iteration: **for loop variations**
- tidyverse wrap-up
- new functions in **chapter 7: Uncertainty (7.3)**

## Reference

- [Quantitative Social Science: An Introduction in tidyverse](https://press.princeton.edu/books/hardcover/9780691222271/quantitative-social-science)
- [R for Data Science](https://r4ds.hadley.nz/functions.html#functions-are-for-humans-and-computers)
- [Advanced R](https://adv-r.hadley.nz/)
- Artwork by @[allison_horst](https://github.com/allisonhorst/stats-illustrations)

