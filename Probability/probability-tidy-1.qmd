---
title: "Probability - Tidyverse 1"
author: "Xiaolong Yang"
institute: "University of Tokyo"
date: "June 24, 2022"
navigation: frame
format: 
  beamer: 
    navigation: horizontal
    theme: "Madrid"
    colortheme: "beaver"
    incremental: false
---

```{r include = FALSE}
library(tidyverse)
data(FLVoters, package = "qss")
```

## Today's Game Plan

1.   column-wise operations with `dplyr` package
   - `across()`
   - `where()`
2.  writing mathematics in `Rmarkdown`
3.   writing code in `Rmarkdown`

:::{.callout-note appearance="simple"}
Today's in-class assignment: `enigma`
::: 

# Column-wise operations

## Recap: `dplyr` as a grammar of data manipulation

-   `mutate()` adds new variables that are functions of existing variables
-   `select()` picks variables based on their names.
-   `filter()` picks cases based on their values.
-   `summarize()` reduces multiple values down to a single summary.
-   `arrange()` changes the ordering of the rows.
-   `group_by()` perform operations by group

## Column-wise operations with `dplyr`

**Apply the same function to multiple variables/columns?** \newline

-   tedious to apply the same operation across columns
-   solution: `across() + where() + other dplyr functions`

## Column-wise operations with `dplyr`

-   `FLVoters` data set as a heuristic

```{r}
#| echo: true 
glimpse(FLVoters)
```

## Tedious-and-error-prone-but-works approach

-   calculate the mean to all the numeric variables

```{r}
#| echo: true 

FLVoters %>% summarise(
  mean_country = mean(county, na.rm = TRUE), 
  mean_VTD = mean(VTD, na.rm = TRUE), 
  mean_age = mean(age, na.rm = TRUE)
  )
```

## Easier-and-works-better approach

-   same goal, different operation

```{r}
#| echo: true 

FLVoters %>% summarise(across(county:age, mean, na.rm = TRUE))
```

## Basic usage of across() function

-   `.cols` selects the columns to operate on
    -   think of `select()`
    -   by position, name, type
-   `.fns` function(s) to apply to each column
    -   `n_distinct()`
    -   `min()`
    -   `max()`
    -   `sum()`
    -   `sd()`
    -   ...

```{r}
#| eval: false
#| echo: true 

across(.cols = columns,
       .fns = function)
```

## A list of functions for `.fns`

-   name a list of functions
-   supply the named list in the `fns` argument
-   example: `min()` and `max()` at once

```{r}
#| eval: false
#| echo: true 

min_max <- list(
  min = ~min(.x, na.rm = TRUE), 
  max = ~max(.x, na.rm = TRUE)
)

FLVoters %>% 
  summarise(across(county:age, min_max)) %>% 
  glimpse()
```

## A list of functions for `.fns`

```{r}
#| eval: true
#| echo: false 

min_max <- list(
  min = ~min(.x, na.rm = TRUE), 
  max = ~max(.x, na.rm = TRUE)
)

FLVoters %>% 
  group_by(gender, race) %>% 
  summarise(across(county:age, min_max)) %>% 
  glimpse()
```

## across() with where()

-   `where()` as a selection helper
    1.  takes a function
    2.  returns all variables when `function = TRUE`

```{r}
#| eval: true
#| echo: true 

FLVoters %>% 
  select(where(is.numeric)) %>% 
  head()
```

## across() with where()

-   `where()` as a selection helper
    1.  takes a function
    2.  returns all variables when `function = TRUE`

```{r}
#| eval: true
#| echo: true 

FLVoters %>% 
  summarize(across(where(is.numeric), mean, na.rm = TRUE)) %>% 
  glimpse()
```

## across() in conjunction with dplyr verbs

-   `across()` work with most other verbs (besides `summarize()`) e.g.,
    -   `mutate()`
    -   `group_by()`
    -   `count()`
    -   `distinct()`
    - ...

```{r}
#| eval: false
#| echo: true 

FLVoters %>% 
  na.omit() %>% 
  group_by(gender) %>% 
  summarise(
    across(where(is.numeric), min_max),
    across(where(is.numeric), mean),
    across(where(is.character), tolower)) %>% 
  glimpse()

```

## across() in conjunction with dplyr verbs

```{r}
#| eval: true
#| echo: false 

FLVoters %>% 
  na.omit() %>% 
  group_by(gender) %>% 
  summarise(
    across(where(is.numeric), min_max),
    across(where(is.numeric), mean),
    across(where(is.character), tolower)) %>% 
  glimpse()

```

## Short Summary: why across()?

-   **flexible**: complex column-wise operations
    -   works great with `summarise()` with the help of `where()`
-   **light**: reduces repetition of functions

# Writing Maths in Rmarkdown

## Mathematical modes in Rmarkdown

1.  *Inline* by `$...$`

-   to write maths as part of a paragraph

2.  *Display* by `$$...$$`

-   independent expressions that are put on separate lines

## $LaTeX$ for typesetting mathematics

-   widely adopted approach to write technical documents in political science and across scientific disciplines
-   Cheat sheet for mathematical notations: [**link**](http://tug.ctan.org/info/undergradmath/undergradmath.pdf) \newline

\begin{center}
"Focus on writing, not typesetting."
\end{center}

## Example

**Inline maths** \newline
Define `$P(M_i)$` as the probability that a randomly chosen message was assigned to machine `$i$`. Let `$U$` denote the event that some machine failed to decode a message. Then, we are interested in determining machine `$i$` for which `$P(M_i \mid U)$` is the greatest. Applying Bayes' rule, we have,

**Display maths** \newline `$$P(M_i \mid U) \ = \ \frac{P(U \mid M_i) P(M_i)}{P(U)} \ = \  \frac{P(U \mid M_i) P(M_i)}{\sum_{j=1}^5 P(U \mid M_j) P(M_j)}$$`

## Example

**Inline maths** \newline
Define $P(M_i)$ as the probability that a randomly chosen message was assigned to machine $i$. Let $U$ denote the event that some machine failed to decode a message. Then, we are interested in determining machine $i$ for which $P(M_i \mid U)$ is the greatest. Applying Bayes' rule, we have,

**Display maths** \newline
$$
 P(M_i \mid U) \ = \ \frac{P(U \mid M_i) P(M_i)}{P(U)} \ = \
 \frac{P(U \mid M_i) P(M_i)}{\sum_{j=1}^5 P(U \mid M_j) P(M_j)} 
$$

# Writing code in Rmarkdown

## Two modes of code in `Rmarkdown`

- An `Rmarkdown` document = **prose** + **code**
- Code in an `Rmarkdown` document = **code chunks** + **inline code**

**Display code** : wrap code with ````` ```{r} ````` and ````` ``` `````

:::{.callout-tip appearance="simple"}
## configuration
Code chunk is customizable by setting the arguments in `{}`. See [**link**](https://quarto.org/docs/computations/execution-options.html) for more. 
::: 

**Inline code**: wrap code with ``` `` ``` \newline
Please use `` `library("tidyverse")` `` to load the `` `tidyverse` `` package. $\rightarrow$ Please use `library("tidyverse")` to load the `tidyverse` package.

## Summary

**What we learnt**

- column-wise operations with `across()` and `where()`
- writing maths (`inline` & `display`) in `Rmarkdown`
- writing codes  (`inline` & `display`) in `Rmarkdown`


## Future Game Plan

-   write your functions
-   `purrr` package

